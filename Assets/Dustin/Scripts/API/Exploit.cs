using System;
using System.Collections.Generic;

namespace Dustin.Scripts.API
{
    public class Exploit
    {
    }

    public class Resource
    {
        public string Name { get; private set; }
        public Item ItemDropped { get; private set; }
        public int MaxHits { get; private set; }
        public int DropRate { get; private set; }

        private int _hitsRemaining;

        public Resource(string name, Item itemDropped, int maxHits, int dropRate=1)
        {
            Name = name;
            ItemDropped = itemDropped;
            DropRate = dropRate;
            MaxHits = maxHits;
            _hitsRemaining = maxHits;
        }
        
        // Using "multiple hits" as a proxy for weaker/stronger hits with upgraded tools
        public Item[] ExploitResource(int hits)
        {
            _hitsRemaining -= hits;
            if (_hitsRemaining > 0) return null;
            
            var items = new Item[DropRate];
            for (int i = 0; i < DropRate; i++)
            {
                items[i] = new Item(ItemDropped);
            }
            return items;
        }
    }

    public class Item
    {
        public string Name { get; private set; }
        
        public Item(string name)
        {
            Name = name;
        }

        public Item(Item item)
        {
            Name = item.Name;
        }

        public void WasCollected()
        {
            // TODO: Call delegate OnCollected()
        }
    }

    public class Inventory
    {
        public int MaxItemCapacity { get; private set;  }
        public List<Item> Items { get; private set;  }
        
        private const int BaseCapacity = 10;

        public Inventory()
        {
            MaxItemCapacity = BaseCapacity;
            Items = new List<Item>();
        }

        public bool UpdateItemCapacity(int capacity)
        {
            if (Items.Count < capacity)
            {
                MaxItemCapacity = capacity;
            }
            else
            {
                // TODO: Add exception handling when there are more items in inventory
                return false;
            }

            return true;
        }

        public bool CollectItem(Item item)
        {
            // TODO: Throw exception if over capacity
            if (Items.Count >= MaxItemCapacity) return false;
            
            Items.Add(item);

            item.WasCollected();

            return true;
        }
    }
}
